{"version":3,"sources":["components/images/comment.svg","components/images/repost.svg","components/images/likes.svg","components/images/share.svg","components/images/tick.svg","components/component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","actions","count","type","img","messageIcon","repostIcon","likesIcon","shareIcon","Post","key","className","alt","src","author","photo","name","sendedIcon","nickname","date","content","image","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4EAAAA,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,uQCQrCC,EAAU,CACd,CACEC,MAAO,IACPC,KAAM,WACNC,IAAKC,KAEP,CACEH,MAAO,IACPC,KAAM,UACNC,IAAKE,KAEP,CACEJ,MAAO,IACPC,KAAM,QACNC,IAAKG,KAEP,CACEL,MAAO,EACPC,KAAM,QACNC,IAAKI,MA4CMC,MAzCf,SAAcC,GACZ,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,SAASC,IAAI,SAASC,IAAKH,EAAII,OAAOC,QACrD,0BAAMJ,UAAU,OACd,uBAAGA,UAAU,QAAQD,EAAII,OAAOE,MAChC,yBAAKL,UAAU,cAAcE,IAAKI,IAAYL,IAAI,WAClD,uBAAGD,UAAU,YAAYD,EAAII,OAAOI,UACpC,uBAAGP,UAAU,aAAb,KACA,uBAAGA,UAAU,QAAQD,EAAIS,QAG7B,yBAAKR,UAAU,iBACf,yBAAKA,UAAU,WACb,yBAAKA,UAAU,gBACb,uBAAGA,UAAU,WAAWD,EAAIU,SAC5B,yBAAKT,UAAU,QAAQE,IAAKH,EAAIW,MAAOT,IAAI,cAG/C,yBAAKD,UAAU,uBACb,0BAAMA,UAAU,sBACd,yBAAKA,UAAU,OAAOE,IAAKZ,EAAQ,GAAGG,IAAKQ,IAAKX,EAAQ,GAAGE,OAC3D,uBAAGQ,UAAU,UAAUV,EAAQ,GAAGC,QAEpC,0BAAMS,UAAU,sBACd,yBAAKA,UAAU,OAAOE,IAAKZ,EAAQ,GAAGG,IAAKQ,IAAKX,EAAQ,GAAGE,OAC3D,uBAAGQ,UAAU,UAAUV,EAAQ,GAAGC,QAEpC,0BAAMS,UAAU,sBACd,yBAAKA,UAAU,OAAOE,IAAKZ,EAAQ,GAAGG,IAAKQ,IAAKX,EAAQ,GAAGE,OAC3D,uBAAGQ,UAAU,UAAUV,EAAQ,GAAGC,QAEpC,0BAAMS,UAAU,sBACd,yBAAKA,UAAU,OAAOE,IAAKZ,EAAQ,GAAGG,IAAKQ,IAAKX,EAAQ,GAAGE,OAC3D,uBAAGQ,UAAU,UAAUV,EAAQ,GAAGC,WC9C7BoB,MAff,WACE,OACE,yBAAKX,UAAU,OACb,kBAAC,EAAD,CAAMG,OAAQ,CACRE,KAAM,mBACND,MAPS,6FAQTG,SAAU,eAEZE,QAAQ,kDACRC,MAVQ,gGAWRF,KAAM,mCCFII,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8866e1a4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/comment.0ec68f32.svg\";","module.exports = __webpack_public_path__ + \"static/media/repost.10951a97.svg\";","module.exports = __webpack_public_path__ + \"static/media/likes.70ebbcd1.svg\";","module.exports = __webpack_public_path__ + \"static/media/share.3df4d79c.svg\";","module.exports = __webpack_public_path__ + \"static/media/tick.4ee74cc7.svg\";","import React from 'react';\r\nimport './component.css'\r\nimport '../reset.css'\r\nimport messageIcon from './images/comment.svg'\r\nimport repostIcon from './images/repost.svg'\r\nimport likesIcon from './images/likes.svg'\r\nimport shareIcon from './images/share.svg'\r\nimport sendedIcon from './images/tick.svg'\r\nconst actions = [\r\n  {\r\n    count: 482,\r\n    type: \"messages\",\r\n    img: messageIcon,\r\n  },\r\n  {\r\n    count: 146,\r\n    type: \"reposts\",\r\n    img: repostIcon,\r\n  },\r\n  {\r\n    count: 887,\r\n    type: \"likes\",\r\n    img: likesIcon,\r\n  },\r\n  {\r\n    count: 0,\r\n    type: \"share\",\r\n    img: shareIcon,\r\n  }\r\n]\r\nfunction Post(key) {\r\n  return (\r\n    <div className=\"post\">\r\n      <div className=\"author-inf\">\r\n        <img className=\"avatar\" alt=\"avatar\" src={key.author.photo}/>\r\n        <span className=\"inf\">\r\n          <p className=\"name\">{key.author.name}</p>\r\n          <img className=\"sended-icon\" src={sendedIcon} alt=\"sended\"/>\r\n          <p className=\"nickname\">{key.author.nickname}</p>\r\n          <p className=\"saparated\">|</p>\r\n          <p className=\"date\">{key.date}</p>\r\n        </span>\r\n      </div>\r\n      <div className=\"between-line\"></div>\r\n      <div className=\"content\">\r\n        <div className=\"main-content\">\r\n          <p className=\"message\">{key.content}</p>\r\n          <img className=\"photo\" src={key.image} alt=\"content\"/>  \r\n        </div>\r\n      </div>\r\n      <div className=\"another-possibility\">\r\n        <span className=\"icon-and-his-count\">\r\n          <img className=\"icon\" src={actions[0].img} alt={actions[0].type}/>\r\n          <p className=\"amount\">{actions[0].count}</p>\r\n        </span>  \r\n        <span className=\"icon-and-his-count\">\r\n          <img className=\"icon\" src={actions[1].img} alt={actions[1].type}/>\r\n          <p className=\"amount\">{actions[1].count}</p>\r\n        </span> \r\n        <span className=\"icon-and-his-count\">\r\n          <img className=\"icon\" src={actions[2].img} alt={actions[2].type}/>\r\n          <p className=\"amount\">{actions[2].count}</p>\r\n        </span> \r\n        <span className=\"icon-and-his-count\">\r\n          <img className=\"icon\" src={actions[3].img} alt={actions[3].type}/>\r\n          <p className=\"amount\">{actions[3].count}</p>\r\n        </span> \r\n      </div>    \r\n    </div>\r\n  )\r\n}\r\nexport default Post","import React from 'react';\nimport Post from './components/component.jsx';\nconst ANAKIN_IMAGE = \"https://upload.wikimedia.org/wikipedia/en/thumb/7/74/Anakin-Jedi.jpg/220px-Anakin-Jedi.jpg\";\nconst RAY_IMAGE = \"https://specials-images.forbesimg.com/imageserve/5e63b3c8e1e617000759130e/960x0.jpg?fit=scale\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Post author={{\n            name: \"Anakin Skywalker\",\n            photo: ANAKIN_IMAGE,\n            nickname: \"@dart_vader\"\n        }}\n          content=\"WTF? Who is Ray? Why she is Skywalker? Luke...?\"\n          image={RAY_IMAGE}\n          date={\"26 февр.\"}\n      />\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}